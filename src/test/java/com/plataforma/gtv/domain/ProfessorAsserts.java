package com.plataforma.gtv.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProfessorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfessorAllPropertiesEquals(Professor expected, Professor actual) {
        assertProfessorAutoGeneratedPropertiesEquals(expected, actual);
        assertProfessorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfessorAllUpdatablePropertiesEquals(Professor expected, Professor actual) {
        assertProfessorUpdatableFieldsEquals(expected, actual);
        assertProfessorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfessorAutoGeneratedPropertiesEquals(Professor expected, Professor actual) {
        assertThat(expected)
            .as("Verify Professor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfessorUpdatableFieldsEquals(Professor expected, Professor actual) {
        assertThat(expected)
            .as("Verify Professor relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getSobrenome()).as("check sobrenome").isEqualTo(actual.getSobrenome()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNumeroTelefone()).as("check numeroTelefone").isEqualTo(actual.getNumeroTelefone()))
            .satisfies(e -> assertThat(e.getIngresso()).as("check ingresso").isEqualTo(actual.getIngresso()))
            .satisfies(e -> assertThat(e.getMateriaLecionada()).as("check materiaLecionada").isEqualTo(actual.getMateriaLecionada()))
            .satisfies(e ->
                assertThat(e.getRegistroProfissional()).as("check registroProfissional").isEqualTo(actual.getRegistroProfissional())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProfessorUpdatableRelationshipsEquals(Professor expected, Professor actual) {
        assertThat(expected)
            .as("Verify Professor relationships")
            .satisfies(e -> assertThat(e.getServico()).as("check servico").isEqualTo(actual.getServico()));
    }
}
